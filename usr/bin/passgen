#!/bin/bash

# PassGen - Generates passwords
# Copyright (C) 2024 Ahad Fallah
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

# Init flags for options
path=$PWD/file.txt
flag_o=false
specialChar='!@#$%^&*()_+[]{}|;:,.<>?'
uppercaseChar='A-Z'
lowrcaseChar='a-z'
numChar='0-9'
len=16
help=false
clipboard=false

# Handle parameters and options
set -- $(getopt -q no:sl:ULch "$@")
for param in $@; do
	case $param in
	-n) numChar= ;; # No number char
	-o)
		if [[ -n "$2" && "$2" != -* ]]; then
			path="$2"
			shift 2
		else
			path=$PWD/file.txt
			shift
		fi
		flag_o=true
		;;                 # Output
	-s) specialChar= ;; # No special char
	-U) uppercaseChar= ;;
	-L) lowrcaseChar= ;;
	-l)
		len=$2
		shift
		;; # Length of password
	-c) clipboard=true ;;
	-h | --help) help=true ;;
	esac
	shift
done
len=${len//\'/}
path=${path//\'/}

# Help section
if $help; then
	echo "Usage: $0 [options]"
	echo "Options:"
	echo "  -n                Exclude numbers from the password"
	echo "  -o <path>         Specify the output file path (default is ./file.txt)"
	echo "  -s                Exclude special characters from the password"
	echo "  -U                Exclude uppercase characters from the password"
	echo "  -L                Exclude lowercase characters from the password"
	echo "  -c                Copy the generated password to the clipboard"
	echo "  -l <length>       Specify the length of the password (default is 16)"
	echo "  -h, --help        Display this help message and exit"
	exit 0
fi

# Result depends on options
codingChar=$uppercaseChar$lowrcaseChar$numChar$specialChar
random_string=$(head /dev/urandom | tr -dc $codingChar | head -c $len)

if $flag_o; then
	echo "$random_string" >"$path"
	echo "Your password has been successfully saved in the default or given path"
fi

if $clipboard; then
	echo "$random_string" | xclip -selection clipboard
fi

# Output the password to the terminal

if [[ "$clipboard" != true ]] && [[ "$flag_o" != true ]]; then

	echo "$random_string"

fi
